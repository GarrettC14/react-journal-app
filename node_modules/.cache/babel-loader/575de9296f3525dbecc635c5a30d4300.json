{"ast":null,"code":"var _jsxFileName = \"/Users/daiyan/Desktop/react-journal-app/src/app/calendar/InputField/InputField.js\";\nimport React, { useState } from 'react';\nimport styles from './InputField.module.css';\nimport Button from '@material-ui/core/Button';\nimport Aux from '../../../Auxiliary/Auxiliary';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport FormatDate from './FormatDate'; //GOALS FOR THE NEXT SESSION\n// 2 have the data here be rendered to state, this will need to be updated in the future with a specific \n//state identifier for the DB to register correctly\n//we dont actually need the date id as a unique identifier. can use UUID in DB to generate specific ID for each entry\n//what does this look like in the DB? \n//db jounral\n//table diary {UUID Primary Generated Key : \"1\", Description \"text entry here\"}\n//each date in client needs to have an ID though... \n//TODOS!\n//rewrite below using function component\n//will need react hooks to manage shouldRender - DONE\n//we need to rewrite because state already has the selected day via react hooks (value)\n//so in order to get the selected day (which we need to append an ID to) we also need to use react hooks\n// next todo - need to access value via state (pass in value to this component?)\n//recap - value is used in react hooks, it's value is set to a call to moment() - which we need to add a unique identifier (I think)\n//okay, so we now have access to the selected day in the selected day\n//the problem is this, I need an identidfier that I can use to fetch the right data on click. The problem is that I cannot asign this ID to every date property, because \n//this is created using a library I dont understand, so I need to create my own ID from the date property. \n//convert the date property into a string that is always the same, then pass that into the DB as the ID property\n\nconst InputField = ({\n  value\n}) => {\n  const [shouldRender, setShouldRender] = useState(false); //function returns \"03052021\" (MMDDYYYY) depends on the date clicked in UI\n\n  const UUID = FormatDate({\n    value\n  });\n  let textInput;\n\n  if (shouldRender) {\n    textInput = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextareaAutosize, {\n      style: {\n        margin: \"auto\",\n        display: \"flex\",\n        width: \"60%\",\n        height: \"125px\",\n        marginTop: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.CenterButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      startIcon: /*#__PURE__*/React.createElement(SaveIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 40\n        }\n      }),\n      color: \"primary\",\n      variant: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }\n    }, \"Save\"), /*#__PURE__*/React.createElement(Button, {\n      startIcon: /*#__PURE__*/React.createElement(DeleteIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 40\n        }\n      }),\n      onClick: e => setShouldRender(!shouldRender),\n      color: \"secondary\",\n      variant: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }\n    }, \"Discard\")));\n  } else {\n    textInput = null;\n  }\n\n  return /*#__PURE__*/React.createElement(Aux, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: e => setShouldRender(!shouldRender),\n    size: \"medium\",\n    style: {\n      margin: \"auto\",\n      display: \"flex\",\n      marginTop: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"Create New Entry\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, textInput));\n};\n\nexport default InputField;","map":{"version":3,"sources":["/Users/daiyan/Desktop/react-journal-app/src/app/calendar/InputField/InputField.js"],"names":["React","useState","styles","Button","Aux","SaveIcon","DeleteIcon","TextareaAutosize","FormatDate","InputField","value","shouldRender","setShouldRender","UUID","textInput","margin","display","width","height","marginTop","CenterButton","e"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,GAAP,MAAgB,8BAAhB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAGA;AAGA;AACI;AAGJ;AAEA;AACI;AACI;AAEA;AAIR;AACA;AACI;AAEJ;AACI;AAGJ;AACI;AAEJ;AAEA;AACI;AAEJ;;AAIA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAC5B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD,CAD4B,CAG5B;;AACA,QAAMY,IAAI,GAAGL,UAAU,CAAC;AAACE,IAAAA;AAAD,GAAD,CAAvB;AAGI,MAAII,SAAJ;;AACA,MAAIH,YAAJ,EAAkB;AACdG,IAAAA,SAAS,gBACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACA,MAAA,KAAK,EAAI;AACLC,QAAAA,MAAM,EAAC,MADF;AAELC,QAAAA,OAAO,EAAC,MAFH;AAGLC,QAAAA,KAAK,EAAC,KAHD;AAILC,QAAAA,MAAM,EAAC,OAJF;AAKLC,QAAAA,SAAS,EAAC;AALL,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAUQ;AAAK,MAAA,SAAS,EAAGjB,MAAM,CAACkB,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AACI,MAAA,SAAS,eAAE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADf;AAEI,MAAA,KAAK,EAAG,SAFZ;AAGI,MAAA,OAAO,EAAG,WAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI,oBAAC,MAAD;AACI,MAAA,SAAS,eAAE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADf;AAEI,MAAA,OAAO,EAAIC,CAAC,IAAIT,eAAe,CAAC,CAACD,YAAF,CAFnC;AAGI,MAAA,KAAK,EAAG,WAHZ;AAII,MAAA,OAAO,EAAG,WAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPJ,CAVR,CADA;AA2BH,GA5BD,MA4BO;AACHG,IAAAA,SAAS,GAAG,IAAZ;AACH;;AAEL,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AACA,IAAA,OAAO,EAAC,WADR;AAEA,IAAA,KAAK,EAAG,SAFR;AAGA,IAAA,OAAO,EAAGO,CAAC,IAAIT,eAAe,CAAC,CAACD,YAAF,CAH9B;AAIA,IAAA,IAAI,EAAG,QAJP;AAKA,IAAA,KAAK,EAAE;AACHI,MAAAA,MAAM,EAAE,MADL;AAEHC,MAAAA,OAAO,EAAE,MAFN;AAGHG,MAAAA,SAAS,EAAC;AAHP,KALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CADA,eAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAML,SAAN,CAfA,CADJ;AAmBH,CA3DD;;AA6DA,eAAeL,UAAf","sourcesContent":["import React, {useState} from 'react'\nimport styles from './InputField.module.css'\nimport Button from '@material-ui/core/Button'\nimport Aux from '../../../Auxiliary/Auxiliary'\nimport SaveIcon from '@material-ui/icons/Save'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\nimport FormatDate from './FormatDate'\n\n\n//GOALS FOR THE NEXT SESSION\n\n\n// 2 have the data here be rendered to state, this will need to be updated in the future with a specific \n    //state identifier for the DB to register correctly\n\n\n//we dont actually need the date id as a unique identifier. can use UUID in DB to generate specific ID for each entry\n\n//what does this look like in the DB? \n    //db jounral\n        //table diary {UUID Primary Generated Key : \"1\", Description \"text entry here\"}\n\n        //each date in client needs to have an ID though... \n\n\n\n//TODOS!\n//rewrite below using function component\n    //will need react hooks to manage shouldRender - DONE\n\n//we need to rewrite because state already has the selected day via react hooks (value)\n    //so in order to get the selected day (which we need to append an ID to) we also need to use react hooks\n\n\n// next todo - need to access value via state (pass in value to this component?)\n    //recap - value is used in react hooks, it's value is set to a call to moment() - which we need to add a unique identifier (I think)\n\n//okay, so we now have access to the selected day in the selected day\n\n//the problem is this, I need an identidfier that I can use to fetch the right data on click. The problem is that I cannot asign this ID to every date property, because \n    //this is created using a library I dont understand, so I need to create my own ID from the date property. \n\n//convert the date property into a string that is always the same, then pass that into the DB as the ID property\n\n\n\nconst InputField = ({value}) => {\n    const [shouldRender, setShouldRender] = useState(false)\n\n    //function returns \"03052021\" (MMDDYYYY) depends on the date clicked in UI\n    const UUID = FormatDate({value});\n\n\n        let textInput;\n        if (shouldRender) {\n            textInput = (\n            <div>\n                <TextareaAutosize \n                style = {{\n                    margin:\"auto\",\n                    display:\"flex\",\n                    width:\"60%\",\n                    height:\"125px\",\n                    marginTop:\"10px\"\n                }}\n                />\n                    <div className ={styles.CenterButton}>\n                        <Button \n                            startIcon={<SaveIcon/>}\n                            color = \"primary\"\n                            variant = \"contained\">\n                                Save\n                        </Button>\n                        <Button \n                            startIcon={<DeleteIcon/>}\n                            onClick= { e => setShouldRender(!shouldRender)}\n                            color = \"secondary\"\n                            variant = \"contained\">\n                                Discard\n                        </Button>\n                    </div>\n            </div>)\n        } else {\n            textInput = null\n        }\n\n    return(\n        <Aux>\n        <div>\n            <Button \n            variant=\"contained\" \n            color = \"primary\" \n            onClick= {e => setShouldRender(!shouldRender)}\n            size = \"medium\"\n            style={{\n                margin: \"auto\",\n                display: \"flex\",\n                marginTop:\"10px\"\n             }}>\n                Create New Entry\n            </Button>\n        </div>\n        <div>{textInput}</div>\n    </Aux>\n    )\n}\n\nexport default InputField\n"]},"metadata":{},"sourceType":"module"}